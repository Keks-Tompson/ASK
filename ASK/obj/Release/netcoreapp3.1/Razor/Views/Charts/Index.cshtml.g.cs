#pragma checksum "D:\ASK\ASK\ASK\Views\Charts\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "32ad46a682d03da6a415e3f8170a1b084ba86a81"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Charts_Index), @"mvc.1.0.view", @"/Views/Charts/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\ASK\ASK\ASK\Views\_ViewImports.cshtml"
using ASK;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\ASK\ASK\ASK\Views\_ViewImports.cshtml"
using ASK.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "D:\ASK\ASK\ASK\Views\Charts\Index.cshtml"
using ASK.BLL.Helper.Setting;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"32ad46a682d03da6a415e3f8170a1b084ba86a81", @"/Views/Charts/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"930e76b06c5fb6b488446b07082fb77dd0fb1ae0", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Charts_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/package/dist/chart.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n\r\n\r\n");
            WriteLiteral(@"

<div class=""container-fluid""
     style="" color: #808080;
            padding: 10px;
          /*  background: #fffffC;*/
            border-radius: 0px;
  /*          box-shadow: 0 0 10px;*/
          /*  box-shadow: inset 0 0 5px;*/
            line-height: 1;
            margin: 0 0 0 0;
            padding: 10px;
            font-size: 94%;
            width: 600px;
            font-family: Times New Roman"" , Times, serif; font-size: 20%;"">
     
");
            WriteLiteral(@"   
      <canvas id=""marksChart"" width=""600"" height=""400""></canvas>
      

</div>


<div class=""container-fluid""
     style="" color: #808080;
            padding: 10px;
          /*  background: #fffffC;*/
            border-radius: 0px;
  /*          box-shadow: 0 0 10px;*/
          /*  box-shadow: inset 0 0 5px;*/
            line-height: 1;
            margin: 0 0 0 0;
            padding: 10px;
            font-size: 94%;
            font-family: Times New Roman"" , Times, serif; font-size: 20%;"">

");
            WriteLiteral("      <h4 class=\"text-center\">");
#nullable restore
#line 50 "D:\ASK\ASK\ASK\Views\Charts\Index.cshtml"
                         Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(" системы ASK </h4>\r\n\r\n       <canvas  id=\"line\" style=\"  width: 1000px;  height: 130px;\"></canvas>\r\n\r\n</div>\r\n\r\n\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "32ad46a682d03da6a415e3f8170a1b084ba86a815025", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
    <script type=""text/javascript"">
        

     var marksCanvas = document.getElementById(""marksChart"");

var marksData = {
  labels: [""Понедельник"", ""Вторник"", ""Среда"", ""Четверг"", ""Пятница"", ""Суббота"", ""Воскресенье""],
  datasets: [{
    label: ""Пост 1"",
    backgroundColor: ""rgba(200,0,0,0.2)"",
    data: [65, 75, 70, 80, 60, 80, 54]
  }, {
    label: ""Пост 2"",
    backgroundColor: ""rgba(0,0,200,0.2)"",
    data: [54, 65, 60, 70, 70, 75, 32]
  }]
};

var radarChart = new Chart(marksCanvas, {
  type: 'radar',
  data: marksData
});




    </script>


   
    <script type=""text/javascript"">
        




        var piechart = document.getElementById('line').getContext('2d');
        var mypiechart = new Chart(piechart, {
           
            type: 'line',
            data: {
                 labels: ['14:00', '14:01', '14:02','14:03','14:04','14:05','14:06','14:07','14:08','14:09','14:10','14:11','14:12','14:13','14:14','14:15','14:16','14:17','14:18','14:19','14:");
            WriteLiteral(@"20','14:21','14:22','14:23','14:24','14:25','14:26','14:27','14:28','14:29','14:30','14:31','14:32','14:33','14:34','14:35','14:36','14:37','14:38','14:39','14:40','14:41','14:42','14:43','14:44','14:45','14:46','14:47','14:48','14:49','14:50','14:51','14:51','14:53','14:54','14:55','14:56','14:57','14:58','14:59','15:01','15:02','15:03','15:03','15:05','15:06','15:07','15:08','15:09','15:10','15:11','15:12','15:13','15:14','15:15','15:16','15:17','15:18','15:19','15:20','15:21','15:22','15:23','15:24','15:25','15:25','15:27','15:28','15:29','15:30','15:31','15:32','15:33','15:34','15:35','15:36','15:37','15:38','15:39','15:40','15:41','15:42','15:43','15:44','15:45','15:46','15:47','15:48','15:49','15:50','15:51','15:52','15:53','15:54','15:55','15:56','15:57','15:58','15:59','16:00','16:01','16:02','16:03','16:04','16:05','16:06','16:07','16:08','16:09','16:10','16:11','16:12','16:13','16:14','16:15','16:16','16:17','16:18','16:19','16:20','16:21','16:22','16:23','16:24','16:25','16:26','16:27','16:28','16:");
            WriteLiteral(@"29','16:30','16:31','16:32','16:33','16:34','16:35','16:36','16:37','16:38','16:39','16:40','16:41','16:42','16:43','16:44','16:45','16:46','16:47','16:48','16:49','16:50','16:51','16:52','16:53','16:54','16:55','16:56','16:57','16:58','16:59','17:00'],
                datasets: [{
                    label: 'CO',
                    data: [Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.ra");
            WriteLiteral(@"ndom(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.ran");
            WriteLiteral(@"dom(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.rand");
            WriteLiteral(@"om(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.rando");
            WriteLiteral(@"m(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random");
            WriteLiteral(@"(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(");
            WriteLiteral(@"1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000)],
                    fill: true,
                    borderColor: ""rgba(200,0,0,0.2)"",
                    backgroundColor: ""rgba(200,0,0,0.2)"",
                    tension: 0.1,
                    
                },{
                    label: 'NO',
                    data: [Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),");
            WriteLiteral(@"Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),M");
            WriteLiteral(@"ath.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Ma");
            WriteLiteral(@"th.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Mat");
            WriteLiteral(@"h.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math");
            WriteLiteral(@".floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.");
            WriteLiteral(@"floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300),Math.floor(Math.random(100)*300)],
                    fill: true,
                    borderColor: ""rgba(0,0,200,0.2)"",
                    backgroundColor: ""rgba(0,0,200,0.2)"",
                    tension: 0.1,
                }//,{
                //    label: '003',
                //    data: [Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*100");
            WriteLiteral(@"0), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000)],
                //    fill: false,
                //    borderColor: 'rgb(65,70,64)',
     ");
            WriteLiteral(@"           //    tension: 0.1,
                //}
                //,{
                //    label: '004',
                //    data: [Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)");
            WriteLiteral(@"*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000), Math.floor(Math.random(1)*1000)],
                //    fill: false,
                //    borderColor: 'rgb(65,70,1)',
                //    tension: 0.1,
                //}


                ]
            },
            options: {
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero:true
                        }
                    }]
                }
            }
        })





    </script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
